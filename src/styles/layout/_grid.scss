@use "sass:math";
@use "../utils/mixins" as *;
$grid-columns: 12;
$grid-gaps: (
    "0": 0,
    "1": 1rem,
    "2": 20px,
    "3": 30px,
    "4": 40px,
);

$grid-sizes: (
    "xs": "xs",
    "sm": "sm",
    "md": "md",
    "lg": "lg",
    "xl": "xl",
);

// Spacing

$isZero: (0);
$spaceamounts: (0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 75, 100);
// Adjust this to include the pixel amounts you need.
// mt-5, mr-5,ml-5, mb-5 = top, right, left, bottom
$sides: (top, bottom, left, right); // Leave this variable alone

@each $space in $spaceamounts {
    @each $side in $sides {
        .m#{str-slice($side, 0, 1)}-#{$space} {
            margin-#{$side}: #{$space}px !important;
        }

        .p#{str-slice($side, 0, 1)}-#{$space} {
            padding-#{$side}: #{$space}px !important;
        }
    }
}

// @include respond(xslgscreens) {
//     @each $space in $spaceamounts {
//         @each $side in $sides {
//             .m#{str-slice($side, 0, 1)}-#{$space} {
//                 margin-#{$side}: #{$space}px !important;
//             }

//             .p#{str-slice($side, 0, 1)}-#{$space} {
//                 padding-#{$side}: #{$space}px !important;
//             }
//         }
//     }
// }

// Gutters
@each $key, $val in $grid-gaps {
    // Removes Gaps in mobile

    .gap-#{$key} > * {
        padding: 0 !important;
    }

    @include respond(xsphones) {
        .gap-#{$key} > * {
            padding: $val !important;
        }
    }
    @include respond(smphones) {
        .gap-#{$key} > * {
            padding: $val !important;
        }
    }

    @include respond(tablets) {
        .gap-#{$key} > * {
            padding: $val !important;
        }
    }

    @include respond(desktop) {
        .gap-#{$key} > * {
            padding: $val;
        }
    }
}

// Columns

.col {
    width: 100%;
}

@for $i from 1 through $grid-columns {
    .col-#{$i} {
        box-sizing: border-box;
        flex-grow: 0;
        width: math.div($i * 100%, $grid-columns);
    }
}
@include respond(xsphones) {
    @for $i from 1 through $grid-columns {
        .col-xs-#{$i} {
            box-sizing: border-box;
            flex-grow: 0;
            width: math.div($i * 100%, $grid-columns);
        }
    }
}

@include respond(smphones) {
    @for $i from 1 through $grid-columns {
        .col-sm-#{$i} {
            box-sizing: border-box;
            flex-grow: 0;
            width: math.div($i * 100%, $grid-columns);
        }
    }
}

@include respond(laptop) {
    @for $i from 1 through $grid-columns {
        .col-md-#{$i} {
            box-sizing: border-box;
            flex-grow: 0;
            width: math.div($i * 100%, $grid-columns);
        }
    }
}

@include respond(desktop) {
    @for $i from 1 through $grid-columns {
        .col-lg-#{$i} {
            box-sizing: border-box;
            flex-grow: 0;
            width: math.div($i * 100%, $grid-columns);
        }
    }
}

@include respond(xl_desktop) {
    @for $i from 1 through $grid-columns {
        .col-xl-#{$i} {
            box-sizing: border-box;
            flex-grow: 0;
            width: math.div($i * 100%, $grid-columns);
        }
    }
}
